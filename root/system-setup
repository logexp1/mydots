#!/usr/bin/env bash
# exit immediately if command exits with a non-zero status

# Before executing this, should do some things like
# - GnuPG settings
set -e

if [[ $EUID -ne 0 ]]; then
	echo "Please run this script as root."
	exit 1
fi

LOG="system_setup.log"
user=jisoo
basedir="$(dirname "$(realpath "$0")")"

# Set some colors for output messages
OK="$(tput setaf 2)[OK]$(tput sgr0)"
ERROR="$(tput setaf 1)[ERROR]$(tput sgr0)"
NOTE="$(tput setaf 3)[NOTE]$(tput sgr0)"
WARN="$(tput setaf 166)[WARN]$(tput sgr0)"
CAT="$(tput setaf 6)[ACTION]$(tput sgr0)"
ORANGE=$(tput setaf 166)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)


# Function to add dnf config if not present in a file
add_config_if_not_present() {
	local file="$1"
	local config="$2"
	if [ ! -f $file ]; then
		touch $file
	fi
	grep -qF "$config" "$file" || echo "$config" | sudo tee -a "$file" > /dev/null
}


root_config() {
	# add_config_if_not_present "/etc/udev/rules.d/input.rules" "KERNEL==\"uinput\", GROUP=\"input\", TAG+=\"uaccess\""
    cp -R "$basedir"/etc "$basedir"/usr /
}

btrbk_setup() {
    mkdir -p /btrbk_snapshots
    systemctl enable btrbk.timer
}

install_package() {
	# Checking if package is already installed
	if dnf list --installed "$1" &>> /dev/null ; then
		echo -e "${OK} $1 is already installed. Skipping..."
	else
		# Package not installed
		echo -e "${NOTE} Installing $1 ..."
		dnf install -y "$1"
		# Making sure package is installed
		if dnf list --installed "$1" &>> /dev/null ; then
			echo -e "\e[1A\e[K${OK} $1 was installed."
		else
			# Something is missing, exiting to review log
			echo -e "\e[1A\e[K${ERROR} $1 failed to install :( , please check the $LOG. You may need to install manually! Sorry I have tried :("
			exit 1
		fi
	fi
}

dnf_setup() {
    # dnf copr enable jle64/gnome-pass-search-provider
    # dnf copr enable -y sunwire/envycontrol
    dnf copr enable -y toroidalfox/kime
    dnf copr enable -y solopasha/hyprland
    # dnf copr enable -y trs-sod/swaylock-effects
    dnf copr enable -y mhartgring/pqiv
    dnf copr enable -y alebastr/sway-extras
    dnf copr enable -y erikreider/SwayNotificationCenter
    dnf copr enable -y deathwish/emacs-pgtk-nativecomp
    dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
    dnf upgrade -y
}


install_packages() {
    # only remove swaylock, otherwise it will not boot
    # dnf remove swaylock --noautoremove
    dnf_setup
	while read -r line; do
		if [[ -z $line ]] || [[ $line =~ \# ]]; then
            continue
        fi
		install_package "$line"
	done < packages
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
}


sudo_setup() {
	echo "Updating sudo configuration."
	chown -R $user:$user /home/$user
	echo "root ALL=(ALL) ALL
%wheel ALL=(ALL) ALL
$user ALL= NOPASSWD: /usr/bin/dnf, /usr/bin/btrbk" | EDITOR='tee' visudo
}

update_user_groups() {
	echo "Updating ${user}'s groups."
	groupadd docker || echo "group docker already exists"
	groupadd libvirt || echo "group libvirt already exists"
	groupadd input || echo "group input already exists"
	usermod --append --groups docker,libvirt,input "$user"
}

docker_setup(){
	/usr/bin/dnf4 config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
	dnf install -y docker-ce docker-ce-cli containerd.io
	systemctl enable docker

}

pass_git_setup() {
    build_dir=/tmp/build
	mkdir -p $build_dir
    latest_tag=$(curl -s https://api.github.com/repos/languitar/pass-git-helper/releases/latest | grep "tag_name" | cut -d '"' -f 4)
    tarball_url=$(curl -s https://api.github.com/repos/languitar/pass-git-helper/releases/latest | grep "tarball_url" | cut -d '"' -f 4)
    file_name="pass-git-helper-${latest_tag}.tar.gz"
    for dir in $build_dir/*pass-git-helper-*/; do
        if [ -d "$dir" ]; then
            rm -rf $dir
        fi
    done
    if curl -L "$tarball_url" -o "$build_dir/$file_name"; then
        cd $build_dir
        tar -xzf "${file_name}" || echo "Error while extracting ${file_name}" >&2
        extracted_dir=$(tar -tf "$file_name" | grep -o '^[^/]\+' | uniq)
        echo "extracted to $extracted_dir"
        cd $extracted_dir
        pip install .
    else
        echo "Failed to download pass-git-helper release"
        exit 1
    fi
}

dragon_setup() {
    build_dir=/tmp/build
    mkdir -p $build_dir
    latest_tag=$(curl -s https://api.github.com/repos/mwh/dragon/releases/latest | grep "tag_name" | cut -d '"' -f 4)
    tarball_url=$(curl -s https://api.github.com/repos/mwh/dragon/releases/latest | grep "tarball_url" | cut -d '"' -f 4)
    file_name="dragon-${latest_tag}.tar.gz"
    for dir in $build_dir/*dragon-*/; do
        if [ -d "$dir" ]; then
            rm -rf $dir
        fi
    done
    if curl -L "$tarball_url" -o "$build_dir/$file_name"; then
        cd $build_dir
        tar -xzf "${file_name}" || echo "Error while extracting ${file_name}" >&2
        extracted_dir=$(tar -tf "$file_name" | grep -o '^[^/]\+' | uniq)
        echo "extracted to $extracted_dir"
        cd $extracted_dir
        make PREFIX=/usr NAME=dragon-drop install
    else
        echo "Failed to download pass-git-helper release"
        exit 1
    fi
}

initramfs_setup() {
    akmods --force
    dracut --force
}

default() {
	root_config
	update_user_groups
	install_packages
	sudo_setup
    initramfs_setup
	btrbk_setup
	docker_setup
	pass_git_setup
}

case $1 in
	root-config) root_config;;
	*) default 2>&1 | tee "$LOG";;
esac
